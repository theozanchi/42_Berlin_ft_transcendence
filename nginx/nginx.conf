events {
	worker_connections 1024;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	sendfile on;
	keepalive_timeout 65;
	server_names_hash_bucket_size 64;

	# resolver 127.0.0.11 valid=30s;

	upstream frontend {
		server frontend:80;
	}

	# upstream game_config {
    #     server game_config:8001;
    # }

    # upstream game_logic {
    #     server game_logic:8002;
    # }

	# upstream authentication {
	# 	server authentication:8003;
	# }

	# HTTP server
	server {
		listen 80;
		listen [::]:80;

		server_name ${SERVER_NAME};

		return 301 https://$server_name$request_uri;
	}

	# HTTPS server
	server {
		listen 443 ssl;
		listen [::]:443 ssl;

		server_name ${SERVER_NAME};

		root /usr/share/nginx/html;

		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_certificate /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/${SERVER_NAME}/privkey.pem;

		location / {
			set $upstream http://frontend;
			proxy_pass $upstream;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		location ~ /\.well-known/acme-challenge {
			allow all;
			try_files $uri $uri/ =404;
		}

		# location /game-config/ {
		# 	set $upstream_game_config http://game_config;
		# 	proxy_pass $upstream_game_config:8001;
		# 	# proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
		# 	proxy_set_header Host $host;
		# 	proxy_set_header X-Real-IP $remote_addr;
		# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# 	proxy_set_header X-Forwarded-Proto $scheme;
		# }

		# location /game-logic/ {
		# 	set $upstream_game_logic http://game_logic;
		# 	proxy_pass $upstream_game_logic:8002;
		# 	proxy_set_header Host $host;
		# 	proxy_set_header X-Real-IP $remote_addr;
		# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# 	proxy_set_header X-Forwarded-Proto $scheme;
		# }

		location /authentication/ {
        	proxy_pass http://authentication:8003;
        	proxy_set_header Host $host;
        	proxy_set_header X-Real-IP $remote_addr;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header X-Forwarded-Proto $scheme;
		}

		location /static {
			alias /usr/share/nginx/html/static;
		}

		# Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "default-src 'self';";
        add_header Referrer-Policy "no-referrer-when-downgrade";
        add_header Permissions-Policy "geolocation=(self), microphone=()";
	}

	# HTTP server for game_config microservice
	server {
		listen 80;
		listen [::]:80;

		server_name game-config.${SERVER_NAME};
		set $target "game_config";

		location / {
        	proxy_set_header Host $host;
        	proxy_set_header X-Real-IP $remote_addr;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header X-Forwarded-Proto $scheme;
        	proxy_buffering off;
        	proxy_request_buffering off;
        	proxy_http_version 1.1;
        	proxy_intercept_errors on;
        	proxy_pass http://$target:8001;
    	}

		access_log off;
    	error_log  /var/log/nginx/error.log error;
	}

	# HTTP server for game_logic microservice
	server {
		listen 80;
		listen [::]:80;

		server_name game-logic.${SERVER_NAME};
		set $target "game_logic";

		location / {
        	proxy_set_header Host $host;
        	proxy_set_header X-Real-IP $remote_addr;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header X-Forwarded-Proto $scheme;
        	proxy_buffering off;
        	proxy_request_buffering off;
        	proxy_http_version 1.1;
        	proxy_intercept_errors on;
        	proxy_pass http://$target:8002;
    	}

		access_log off;
    	error_log  /var/log/nginx/error.log error;
	}

	# HTTP server for authentication microservice
	server {
		listen 80;
		listen [::]:80;

		server_name authentication.${SERVER_NAME};
		set $target "authentication";

		location / {
        	proxy_set_header Host $host;
        	proxy_set_header X-Real-IP $remote_addr;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header X-Forwarded-Proto $scheme;
        	proxy_buffering off;
        	proxy_request_buffering off;
        	proxy_http_version 1.1;
        	proxy_intercept_errors on;
        	proxy_pass http://$target:8003;
    	}

		access_log off;
    	error_log  /var/log/nginx/error.log error;
	}

	# HTTPS server for www
	server {
		listen	443 ssl;
		listen	[::]:443 ssl;

		server_name	www.${SERVER_NAME};

		return 301 https://${SERVER_NAME}$request_uri;
	}
}
