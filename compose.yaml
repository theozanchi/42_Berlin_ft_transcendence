services:
  nginx:
    container_name: nginx
    image: nginx:latest # Based on debian:bookworm-slim
    entrypoint: [ "bash", "/tmp/entrypoint.sh" ]
    volumes:
      - ./nginx:/tmp
      - ${CERTS_DIR}:/etc/letsencrypt
      - ./media_data:/usr/share/nginx/html/media
    networks:
      - frontend
      - backend
    ports:
      - "${PORT}:80"
      - "${SPORT}:443"
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVER_NAME=${SERVER_NAME}
    depends_on:
      - frontend
      - api_gateway
    stop_signal: SIGINT
    stop_grace_period: 2s

  frontend:
    container_name: frontend
    image: nginx:latest # Based on debian:bookworm-slim
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./static:/usr/share/nginx/html/static
    networks:
      - frontend
    stop_signal: SIGINT
    stop_grace_period: 2s

  db:
    image: postgres:latest # Based on debian:bookworm-slim
    container_name: db
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Berlin
    ports:
      - "5432:5432"
    stop_signal: SIGINT
    stop_grace_period: 2s

  user_mgt:
    build: backend/user_mgt/
    command: >
      sh -c "
      ./wait_for_postgres.sh db &&
      python manage.py migrate &&
      python create_superuser.py &&
      gunicorn --workers 3 --bind 0.0.0.0 user_mgt.wsgi:application
      "
    container_name: user_mgt
    volumes:
      - ./backend/user_mgt:/app
      - ./static:/usr/share/nginx/html/static
      - ./media_data:/usr/share/media
    networks:
      - backend
    depends_on:
      - db
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - USR_ADMIN=${DJANGO_SUPERUSER_USERNAME}
      - USR_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - USR_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
    stop_signal: SIGINT
    stop_grace_period: 2s


  api_gateway:
    image: api_gateway_service
    container_name: api_gateway
    build: ./backend/api_gateway
    volumes:
      - ./backend/api_gateway:/code
      - ./static:/usr/share/static
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SERVER_NAME=${SERVER_NAME}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    networks:
      - backend
    depends_on:
      - redis
      - game_logic
      - game_manager
      # - authentication
      - user_mgt
    stop_signal: SIGINT
    stop_grace_period: 2s

  redis:
    image: redis:latest # Based on debian:bookworm-slim
    container_name: redis
   # environment:
 #   - REDIS_PASSWORD=${REDIS_PASSWORD}  # Set Redis password if needed
 #   - REDIS_MAXCLIENTS=10000            # Example: Set maximum clients
 #   - REDIS_MAXMEMORY=2GB               # Example: Set maximum memory
  #  - REDIS_MAXMEMORY_POLICY=volatile-lru
  #  - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - backend
    stop_signal: SIGINT
    stop_grace_period: 2s

  game_logic:
    image: game_logic_service # Based on debian:bookworm-slim
    container_name: game_logic
    build: ./backend/game_logic_service
    volumes:
      - ./backend/game_logic_service:/code
      - ./static:/usr/share/static
    networks:
      - backend
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    stop_signal: SIGINT
    stop_grace_period: 2s

  game_manager:
    image: game_manager_service # Based on debian:bookworm-slim
    container_name: game_manager
    build: ./backend/game_manager_service
    volumes:
      - ./backend/game_manager_service:/code
      - ./static:/usr/share/static
    networks:
      - backend
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SERVER_NAME=${SERVER_NAME}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    stop_signal: SIGINT
    stop_grace_period: 2s

#  authentication:
#    image: authentication_service # Based on debian:bookworm-slim
#    container_name: authentication
#    build: ./backend/authentication_service
#    volumes:
#      - ./backend/authentication_service:/code
#      - ./static:/usr/share/static
#    networks:
#      - backend
#    environment:
#      - POSTGRES_NAME=${POSTGRES_NAME}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#    depends_on:
#      - db

networks:
  frontend:
  backend:

volumes:
  postgres_data:
  media_data: